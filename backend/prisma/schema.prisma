generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(AGENT)
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  properties Property[]
  posts      Post[]

  @@map("users")
}

enum Role {
  ADMIN
  AGENT
}

model Property {
  id              String    @id @default(uuid())
  title           String
  slug            String    @unique
  description     String
  price           Float
  location        String
  address         String?
  zipCode         String?   @map("zip_code")
  city            String    @default("Zaragoza")
  province        String    @default("Zaragoza")
  latitude        Float?
  longitude       Float?
  bedrooms        Int
  bathrooms       Int
  area            Float
  yearBuilt       Int?      @map("year_built")
  energyRating    String    @map("energy_rating")
  propertyType    String    @map("property_type")
  status          Status    @default(ACTIVE)
  featured        Boolean   @default(false)
  userId          String    @map("user_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  user            User      @relation(fields: [userId], references: [id])
  images          Image[]
  features        Feature[]

  @@map("properties")
}

model Image {
  id          String   @id @default(uuid())
  url         String
  publicId    String   @map("public_id")
  propertyId  String   @map("property_id")
  main        Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("images")
}

model Feature {
  id          String   @id @default(uuid())
  name        String
  propertyId  String   @map("property_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("features")
}

model Post {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  coverImage  String?   @map("cover_image")
  published   Boolean   @default(false)
  userId      String    @map("user_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user        User      @relation(fields: [userId], references: [id])
  categories  CategoryOnPost[]

  @@map("posts")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  posts       CategoryOnPost[]

  @@map("categories")
}

model CategoryOnPost {
  postId      String   @map("post_id")
  categoryId  String   @map("category_id")
  createdAt   DateTime @default(now()) @map("created_at")

  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("category_post")
}

enum Status {
  ACTIVE
  INACTIVE
  SOLD
  RESERVED
}
